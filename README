The goal of this assignment is to write a type inference algorithm similar 
(but simpler) than the one in OCaml/Haskell in SWI prolog. In particular, 
this program figures out the types of inputs and outputs of functions and 
type of variables used much like OCaml/Haskell inferes types when it compiles code.

Group
=====

Nicole Ajoy, Yvette Williamson

What we implemented
===================

(Hoping we did most of these correct!)

1. Added more basic functions to provide interesting code (fType predicate)
2. Added more statement types:
    a. global variables with expression initialization
    b. global function definitions
        last expression is an implicit return. return statement also possible
    c. expression computation (as a statement)
    d. if statements
    e. "let in" statement for local variables
    f. "where" statements in Haskell
    g. code blocks
3. 20+ tests for all predicates
4. Added sum types (bonus)
5. Added tuple types (bonus)

Running the code and tests
==========================

A) Start SWI prolog interpreter (run swipl on Lixnux and swipl.exe on Windows):
    > swipl
B) Load code:
    ?- [typeInf].

Running unit tests
==================

A) Run all tests:
    ?- consult("typeInf.plt"), run_tests().

Fin
==================

Thank you!
- Nicole, Yvette